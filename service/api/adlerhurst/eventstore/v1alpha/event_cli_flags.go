// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package v1alpha

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type ActionFlag struct {
	*Action

	changed bool
	set     *pflag.FlagSet

	actionFlag   *cli_client.StringSliceParser
	revisionFlag *cli_client.Uint32Parser
	payloadFlag  *cli_client.StructParser
}

func (x *ActionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Action", pflag.ContinueOnError)

	x.actionFlag = cli_client.NewStringSliceParser(x.set, "action", "")
	x.revisionFlag = cli_client.NewUint32Parser(x.set, "revision", "")
	x.payloadFlag = cli_client.NewStructParser(x.set, "payload", "")
	parent.AddFlagSet(x.set)
}

func (x *ActionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.actionFlag.Changed() {
		x.changed = true
		x.Action.Action = *x.actionFlag.Value
	}
	if x.revisionFlag.Changed() {
		x.changed = true
		x.Action.Revision = *x.revisionFlag.Value
	}
	if x.payloadFlag.Changed() {
		x.changed = true
		x.Action.Payload = x.payloadFlag.Value
	}
}

func (x *ActionFlag) Changed() bool {
	return x.changed
}

type AggregateFlag struct {
	*Aggregate

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringSliceParser
	commandsFlag        []*CommandFlag
	currentSequenceFlag *cli_client.Uint32Parser
}

func (x *AggregateFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Aggregate", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringSliceParser(x.set, "id", "")
	x.commandsFlag = []*CommandFlag{}
	x.currentSequenceFlag = cli_client.NewUint32Parser(x.set, "current-sequence", "")
	parent.AddFlagSet(x.set)
}

func (x *AggregateFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "commands")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("commands") {
		x.commandsFlag = append(x.commandsFlag, &CommandFlag{Command: new(Command)})
		x.commandsFlag[len(x.commandsFlag)-1].AddFlags(x.set)
		x.commandsFlag[len(x.commandsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.Aggregate.Id = *x.idFlag.Value
	}
	if len(x.commandsFlag) > 0 {
		x.changed = true
		x.Commands = make([]*Command, len(x.commandsFlag))
		for i, value := range x.commandsFlag {
			x.Aggregate.Commands[i] = value.Command
		}
	}

	if x.currentSequenceFlag.Changed() {
		x.changed = true
		x.Aggregate.CurrentSequence = x.currentSequenceFlag.Value
	}
}

func (x *AggregateFlag) Changed() bool {
	return x.changed
}

type CommandFlag struct {
	*Command

	changed bool
	set     *pflag.FlagSet

	actionFlag *ActionFlag
}

func (x *CommandFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Command", pflag.ContinueOnError)

	x.actionFlag = &ActionFlag{Action: new(Action)}
	x.actionFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CommandFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "action")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("action"); flagIdx != nil {
		x.actionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.actionFlag.Changed() {
		x.changed = true
		x.Command.Action = x.actionFlag.Action
	}

}

func (x *CommandFlag) Changed() bool {
	return x.changed
}

type EventFlag struct {
	*Event

	changed bool
	set     *pflag.FlagSet

	idFlag        *cli_client.StringParser
	actionFlag    *ActionFlag
	sequenceFlag  *cli_client.Uint32Parser
	createdAtFlag *cli_client.TimestampParser
}

func (x *EventFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Event", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.sequenceFlag = cli_client.NewUint32Parser(x.set, "sequence", "")
	x.createdAtFlag = cli_client.NewTimestampParser(x.set, "created-at", "")
	x.actionFlag = &ActionFlag{Action: new(Action)}
	x.actionFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *EventFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "action")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("action"); flagIdx != nil {
		x.actionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.Event.Id = *x.idFlag.Value
	}

	if x.actionFlag.Changed() {
		x.changed = true
		x.Event.Action = x.actionFlag.Action
	}

	if x.sequenceFlag.Changed() {
		x.changed = true
		x.Event.Sequence = *x.sequenceFlag.Value
	}
	if x.createdAtFlag.Changed() {
		x.changed = true
		x.Event.CreatedAt = x.createdAtFlag.Value
	}
}

func (x *EventFlag) Changed() bool {
	return x.changed
}

type SubjectFlag struct {
	*Subject

	changed bool
	set     *pflag.FlagSet

	textFlag     *cli_client.StringParser
	wildcardFlag *cli_client.EnumParser[Subject_Wildcard]
}

func (x *SubjectFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Subject", pflag.ContinueOnError)

	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.wildcardFlag = cli_client.NewEnumParser[Subject_Wildcard](x.set, "wildcard", "")
	parent.AddFlagSet(x.set)
}

func (x *SubjectFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	switch cli_client.FieldIndexes(args, "text", "wildcard").Last().Flag {
	case "text":
		if x.textFlag.Changed() {
			x.changed = true
			x.Subject.Subject = &Subject_Text{Text: *x.textFlag.Value}
		}
	case "wildcard":
		if x.wildcardFlag.Changed() {
			x.changed = true
			x.Subject.Subject = &Subject_Wildcard_{Wildcard: *x.wildcardFlag.Value}
		}
	}
}

func (x *SubjectFlag) Changed() bool {
	return x.changed
}
