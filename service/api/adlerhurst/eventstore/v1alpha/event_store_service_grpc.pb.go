// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: adlerhurst/eventstore/v1alpha/event_store_service.proto

package v1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventStoreService_Push_FullMethodName   = "/adlerhurst.eventstore.v1alpha.EventStoreService/Push"
	EventStoreService_Filter_FullMethodName = "/adlerhurst.eventstore.v1alpha.EventStoreService/Filter"
)

// EventStoreServiceClient is the client API for EventStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreServiceClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (EventStoreService_FilterClient, error)
}

type eventStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreServiceClient(cc grpc.ClientConnInterface) EventStoreServiceClient {
	return &eventStoreServiceClient{cc}
}

func (c *eventStoreServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, EventStoreService_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (EventStoreService_FilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStoreService_ServiceDesc.Streams[0], EventStoreService_Filter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreServiceFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStoreService_FilterClient interface {
	Recv() (*FilterResponse, error)
	grpc.ClientStream
}

type eventStoreServiceFilterClient struct {
	grpc.ClientStream
}

func (x *eventStoreServiceFilterClient) Recv() (*FilterResponse, error) {
	m := new(FilterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStoreServiceServer is the server API for EventStoreService service.
// All implementations must embed UnimplementedEventStoreServiceServer
// for forward compatibility
type EventStoreServiceServer interface {
	Push(context.Context, *PushRequest) (*PushResponse, error)
	Filter(*FilterRequest, EventStoreService_FilterServer) error
	mustEmbedUnimplementedEventStoreServiceServer()
}

// UnimplementedEventStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventStoreServiceServer struct {
}

func (UnimplementedEventStoreServiceServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedEventStoreServiceServer) Filter(*FilterRequest, EventStoreService_FilterServer) error {
	return status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedEventStoreServiceServer) mustEmbedUnimplementedEventStoreServiceServer() {}

// UnsafeEventStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServiceServer will
// result in compilation errors.
type UnsafeEventStoreServiceServer interface {
	mustEmbedUnimplementedEventStoreServiceServer()
}

func RegisterEventStoreServiceServer(s grpc.ServiceRegistrar, srv EventStoreServiceServer) {
	s.RegisterService(&EventStoreService_ServiceDesc, srv)
}

func _EventStoreService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreService_Filter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServiceServer).Filter(m, &eventStoreServiceFilterServer{stream})
}

type EventStoreService_FilterServer interface {
	Send(*FilterResponse) error
	grpc.ServerStream
}

type eventStoreServiceFilterServer struct {
	grpc.ServerStream
}

func (x *eventStoreServiceFilterServer) Send(m *FilterResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventStoreService_ServiceDesc is the grpc.ServiceDesc for EventStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adlerhurst.eventstore.v1alpha.EventStoreService",
	HandlerType: (*EventStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _EventStoreService_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Filter",
			Handler:       _EventStoreService_Filter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "adlerhurst/eventstore/v1alpha/event_store_service.proto",
}
